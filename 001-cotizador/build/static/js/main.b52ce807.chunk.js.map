{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Resultado.js","helper.js","componentes/Resumen.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","preventDefault","plan","_this","current","checked","infoAuto","marca","value","year","onSubmit","this","name","ref","type","Component","Resultado","resultado","mensaje","react_transition_group","component","classNames","key","timeout","enter","exit","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","_this$props$datos","datos","componentes_Resultado","App","state","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","obtenerPlan","parseFloat","toFixed","datosAuto","setState","componentes_Header","componentes_Formulario","componentes_Resumen","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b52ce807.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => {\n    return(\n        <header className=\"top\">\n            <h1>{ props.titulo }</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass Formulario extends Component{\n\n    // refs son para leer los valores de los campos de un formulario\n    marcaRef = React.createRef();\n    yearRef = React.createRef();\n    planBasicoRef = React.createRef();\n    planCompletoRef = React.createRef();\n\n\n    cotizarSeguro = (e) => {\n        e.preventDefault();\n\n        // leer el plan\n        const plan = this.planBasicoRef.current.checked ? 'basico': 'completo';\n\n        \n        // obtener los datos\n        \n\n\n\n        // crear el objeto\n        const infoAuto = {\n            marca: this.marcaRef.current.value,\n            year: this.yearRef.current.value,\n            plan: plan\n        }\n\n        //console.log(infoAuto);\n\n        // enviarlo al componente principal\n        this.props.cotizarSeguro(infoAuto);\n\n        // resetear el formulario (opcional)\n        //e.currentTarget.reset();\n\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\n                <div className=\"campo\">\n                    <label>Marca</label>\n                    <select name=\"marca\" ref={this.marcaRef}>\n                        <option value=\"americano\">Americano</option>\n                        <option value=\"europeo\">Europeo</option>\n                        <option value=\"asiatico\">Asiatico</option>\n                    </select>\n                </div>\n\n                <div className=\"campo\">\n                    <label>Año</label>\n                    <select name=\"year\" ref={this.yearRef}>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2018\">2018</option>\n                        <option value=\"2017\">2017</option>\n                        <option value=\"2016\">2016</option>\n                        <option value=\"2015\">2015</option>\n                        <option value=\"2014\">2014</option>\n                        <option value=\"2013\">2013</option>\n                        <option value=\"2012\">2012</option>\n                        <option value=\"2011\">2011</option>\n                        <option value=\"2010\">2010</option>\n                        <option value=\"2009\">2009</option>\n                        <option value=\"2008\">2008</option>\n                    </select>\n                </div>\n                <div className=\"campo\">\n                    <label>Plan:</label>\n                    <input type=\"radio\" name=\"plan\" value=\"basico\" ref={this.planBasicoRef} /> Básico\n                    <input type=\"radio\" name=\"plan\" value=\"completo\" ref={this.planCompletoRef} /> Completo\n                </div>\n\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\n            </form>\n        );\n    }\n}\n\nexport default Formulario;","import React, {Component} from 'react';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\n\nclass Resultado extends Component {\n    render() {\n        const resultado = this.props.resultado;\n        const mensaje = (!resultado) ? 'Elije Marca, Año y Tipo de Seguro':'El total es B.';\n\n        return(\n            <div className=\"gran-total\">\n                <TransitionGroup component=\"span\" className=\"resultado\">\n                    <CSSTransition \n                        classNames=\"resultado\"\n                        key={resultado}\n                        timeout={{enter: 500, exit: 500}} >\n                        <span> {mensaje} { resultado }</span>\n\n                    </CSSTransition>\n                </TransitionGroup>\n                \n            </div>\n        );\n    }\n}\n\nexport default Resultado;","export function obtenerDiferenciaAnio(year) {\n    return new Date().getFullYear() - year;\n }\n \n export function calcularMarca( modelo ) {\n     let incremento;\n \n     switch (modelo) {\n         case 'europeo':\n             incremento = 1.30;\n             break;\n         case 'americano':\n             incremento = 1.15;\n             break;\n         case 'asiatico':\n             incremento = 1.05;\n             break;\n         default:\n             break;\n     }\n \n     return incremento;\n }\n export function obtenerPlan( plan ) {\n     return (plan === 'basico') ? 1.20 : 1.50;\n }\n export function primeraMayuscula(texto) {\n     return texto.charAt(0).toUpperCase() + texto.slice(1);\n }","import React, {Component} from 'react';\n\nimport Resultado from './Resultado';\n\nimport {primeraMayuscula} from '../helper';\n\n\n\nclass Resumen extends Component {\n\n    mostrarResumen = () =>{\n        const {marca, year, plan} = this.props.datos;\n\n        if(!marca || !year || !plan) return null;\n\n        return (\n            <div className=\"resumen\">\n                <h2>Resumen de cotización</h2>\n                <ul>\n                    <li>Marca: { primeraMayuscula(marca)}</li>\n                    <li>Plan: { primeraMayuscula(plan)}</li>\n                    <li>Año del Auto: {year}</li>\n                </ul>\n            </div>\n        )\n    }\n\n    render(){\n        \n        return(\n            <div>\n                {this.mostrarResumen()}\n                <Resultado\n                    resultado={this.props.resultado}\n                />\n            </div>\n        )\n\n    }\n}\n\nexport default Resumen;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Resumen from './Resumen';\n\nimport {obtenerDiferenciaAnio, calcularMarca, obtenerPlan} from '../helper';\n\nclass App extends Component {\n\n  state = {\n    resultado : '',\n    datos: {}\n  }\n\n  cotizarSeguro = (datos) => {\n    const {marca, plan, year} = datos;\n\n    // Agregar una base de 2000\n    let resultado = 2000;\n\n    // Obtener la diferencia de año  \n    const diferencia  = obtenerDiferenciaAnio(year);\n\n    // por cada año restar el 3% al valor del seguro\n    resultado -= ((diferencia * 3)*resultado)/100;\n\n    // Americano 15% Asiatico 5% y eropeo 30% de incremento al valor actual\n    resultado = calcularMarca(marca)*resultado;\n\n    // el plan del auto, el básico incrementa el valor 20% y cobertura completa 50%\n    resultado = obtenerPlan(plan)*resultado;\n\n    // Arreglar decimales\n    resultado = parseFloat(resultado).toFixed(2);\n\n\n    // Crear el objeto para el resumen\n    const datosAuto = {\n      marca: marca,\n      plan: plan,\n      year: year\n    }\n\n\n    // Ya tenemos el costo\n    this.setState({\n      resultado: resultado,\n      datos: datosAuto\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor\">\n        <Header titulo = 'Cotizador de Seguro de Auto' />\n        <div className=\"contenedor-formulario\">\n          <Formulario \n            cotizarSeguro={ this.cotizarSeguro}\n          />\n          <Resumen\n            datos={this.state.datos}\n            resultado = {this.state.resultado}\n          />\n        </div>\n        \n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}